Generating API Docs
(bigger)?, better, faster, stronger

Sarah Adams
sadams.codes@gmail.com
@sadamscodes


* First, my slides

    go get golang.org/x/tools/present

    git clone git@github.com:adams-sarah/gosf-talk.git

    cd gosf-talk && present


* Second, a shout-out

.image images/wwg-group.png _ 500
.caption _Women_Who_Go_ [[meetup.com/women-who-go]]

50 women in < 2 weeks.

Thanks to all who have helped so far.


* Diving in...

* My challenge

* Why are docs so hard to maintain?

* Big changes: doable

- major API feature additions
- adding an API resource / set of endpoints
- general changes to endpoint construction


* Little changes: I never remember

- minor schema changes
- param name changes
- header field changes

* Re: Why are docs so hard to maintain?

The little changes *add* *up*.

* Measuring the quality of your docs


API doc quality is 

*inversely* *correlated* to 

the frequency with which developers *bug* *you* *with* *questions*.

.image images/graph.png _ 700

* In other words...

If you get a lot of questions like

 1. "How do I get an API token?" 

 2. "Where do I put my API token?" 

 3. "Can I retrieve more than N items at once?" 

 4. "What should the request body look like?" 

chances are, your docs need help, 
not your developers.


* How to make your docs more awesome

1. Make them accurate, _reliably_ accurate.

2. Give extra incentive for developers to use/read them.

* My go-to API doc tools

* API Blueprint: About

.link https://apiblueprint.org API Blueprint

- API documentation format
- Open-source
- Write docs in Markdown

* API Blueprint: Example

    ### Create a Widget [POST]
    Add a Widget to the world-wide-widget collection.
    
    + Request (application/json)
    
        + Body
    
                {
                    "Name": "anotherwidget",
                    "Role": "controller"
                }        
    
    
    + Response 201 
    
        + Body
    
                {
                    "Id": 8,
                    "Name": "anotherwidget",
                    "Role": "controller"
                }        
    

* Apiary

Parses your API Blueprint file, and hosts your documentation.

.link http://docs.gosftalk20150617.apiary.io/ my example on apiary.io

.image images/apiary.png _ 700



* My first attempt at a solution

* Attempt #1: The idea

- programatically check API documentation against the API itself

- hook the API doc tests into our CI system

- never push inaccurate documentation ever again!


* Attempt #1: Implementation
- I forked two of Apiary's open-source API testing tools:
.link https://github.com/apiaryio/dredd dredd
.link https://github.com/apiaryio/gavel.js gavel

- I set up automated tests

- I ran these tests periodically, and would spend *a* *few* *hours* just fixing the API docs.


* Problems I had with this solution

- The documentation was more often out of date than not.

- Fixing documentation for *a* *few* *hours* is not my idea of a good time.


* Solution #2 - test2doc

- My favorite form of documentation is *tests*.

- iOS, firmware teams were reluctant to read tests for documentation -- understandabe, I guess.

* Question:

How can I capture the information in my tests, and display it in a friendlier way for my teammates?

* And then came `test2doc`

* How test2doc works

`test2doc` pulls already-existing information from two places:

1. Your tests: records the requests executed by your tests and their corresponding responses

2. Your GoDoc comments: grabs descriptions and metadata for the request handlers.

* `test2doc`: Example time



* If you only take away one thing...

Remember,

.image images/graph.png _ 700

If developers are asking _too_many_ questions, your docs are likely at fault. 

